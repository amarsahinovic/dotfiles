#+Title: Emacs Kickstarter
#+Author: MiniApollo
#+Description: A starting point for Gnu Emacs with good defaults and packages that most people may want to use.
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+Startup: showeverything
#+Options: toc:2

* Table Of Contents :toc:
- [[#introduction][Introduction]]
  - [[#where-to-start][Where to start?]]
  - [[#getting-help][Getting Help]]
- [[#core-setup-and-performance][Core setup and performance]]
  - [[#startup-performance][Startup Performance]]
  - [[#auto-tangle-configuration-file][Auto-tangle Configuration file]]
  - [[#show-startup-time][Show startup time]]
  - [[#use-package][Use Package]]
  - [[#setting-package-repositories][Setting package repositories]]
  - [[#package-quickstart][Package quickstart]]
  - [[#good-defaults][Good Defaults]]
- [[#important-to-load-first][Important to load first]]
  - [[#evil-mode][Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#appearance][Appearance]]
  - [[#set-theme][Set Theme]]
  - [[#transparency][Transparency]]
  - [[#fonts][Fonts]]
  - [[#modeline][Modeline]]
  - [[#nerd-icons][Nerd Icons]]
- [[#development][Development]]
  - [[#add-binaries-to-path][Add binaries to path]]
  - [[#projectile][Projectile]]
  - [[#eglot][Eglot]]
  - [[#sideline-flymake][Sideline-flymake]]
  - [[#yasnippet][Yasnippet]]
  - [[#auto-virtualenv][Auto-Virtualenv]]
  - [[#treesit-auto][Treesit-Auto]]
  - [[#treesitter][Treesitter]]
  - [[#language-modes][Language modes]]
  - [[#ai][AI]]
  - [[#terminal][Terminal]]
- [[#multi-file-example][Multi File Example]]
  - [[#adding-the-lisp-directory-to-load-path][Adding the lisp directory to load-path]]
  - [[#sourcing-the-files][Sourcing the files]]
  - [[#using-the-file][Using the file]]
- [[#version-control][Version control]]
  - [[#git][Git]]
- [[#completion][Completion]]
  - [[#corfu][Corfu]]
  - [[#cape][Cape]]
  - [[#orderless][Orderless]]
  - [[#vertico-and-marginalia][Vertico and Marginalia]]
  - [[#consult][Consult]]
  - [[#helpful][Helpful]]
  - [[#treemacs][Treemacs]]
  - [[#diminish][Diminish]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#which-key][Which-Key]]
  - [[#ws-butler][Ws-butler]]
- [[#runtime-performance][Runtime Performance]]

* Introduction
** Where to start?
First I recommend starting with the Emacs tutorial with the following keybinding: C-h t
Or running the command with M-x: help-with-tutorial
Even if you plan on using Vim keybindings later on, it's a good idea to learn the standard Emacs keybindings.
If you already know the standard Emacs keybindings, you can skip this step.

After you completed that, you should start learning Emacs lisp.
It is not necessary to know elisp, but I recommend it. It will open up a whole new world, trust me.
I used Emacs and Neovim without knowing much about the core language and just copy pasting packages or plugins.
But after learning the fundamentals you can customize basically anything and I really mean ANYTHING.

This will look daunting at first, but don't be scared. This is why I am here.
Elisp is not harder than lua or any other language.

If you don't know anything about elisp, I recommend taking some time to read through
a guide. One possible example which will only take 10-15 minutes:
https://learnxinyminutes.com/elisp/

Or if you want to know everything about elisp:
https://www.gnu.org/software/emacs/manual/html_node/eintr/

** Getting Help
If you get stuck or confused about something, you're in luck:
Because Emacs has a really good help functionality.
Everything under C-h is used for help keybindings.

Using the following keybind: C-h C-h
Or running the following command M-x: help-for-help
Will open up the Emacs help for help menu (I know it's a really creative name :D).
This is the central place where you can see all possible commands you can use when you are stuck.

The most used commands for me are:
- C-h v Describe variable
- C-h f Describe function
- C-h k Describe key

Other also really useful ones:
- C-h i Show all installed manuals
- C-h r Emacs manual
- C-h a Search for commands (see also M-x: Apropos)
- C-h m Show help for current major and minor modes

These commands should be the first thing you use when you're stuck or confused with something.

*** Searching the manual
The manual has a specific mode called info-mode.
Which has useful features you can use.
For more about info-mode: C-h f: info-mode

Basic navigation:
- d key: Go back to the top-level Info Directory.
- u key: Go up to the parent node in the document's hierarchy.
- n key: for next node in the current manual.
- p key: for previous node in the current manual.

*Note:* A Node is essentially a specific section or topic, much like a chapter or subsection in a book.

When you are browsing through the Emacs manual you can easily search with:
- i key: for specific subjects in the current manual.
- g key: for nodes (sections).
- m key: for menu items within the current Info buffer.
- s key: for regular expression patterns (like words) within the current Info buffer.

For evil users after setting up evil collection for info mode:
- g-j: for next node in the current manual.
- g-k: for previous node in the current manual.
- g-G: for nodes (sections).
- g-m: for menu items within the current Info buffer.
- The other keybinds are the same
To see all the evil [[https://github.com/emacs-evil/evil-collection/blob/master/modes/info/evil-collection-info.el][keybindings]] for info mode.

Using goto-node:
- Specify a Manual: If you want to search within a particular manual, place its name in parentheses like (emacs).
- After that tell where you want to go in that manual. For example (emacs)Top, (emacs)specific section.
- If you don't type a manual name, goto-node will search the currently opened manual.

* Core setup and performance
** Startup Performance
Make startup faster by reducing the frequency of garbage collection. This will be set back when startup finishes.
#+begin_src emacs-lisp
    ;; The default is 800 kilobytes. Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** Auto-tangle Configuration file
Auto-Tangle Org configuration file for better startup times.
If you want to use this don't forget to add this to the top of the org document (#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes)

*Remember*, if this code can't be loaded (errors before this code), the init.el file won't update on change!
To fix this, you need to find this file (C-x C-f), fix the error and press C-c C-v t to tangle it manually.

This snippet adds a hook to org-mode buffers so that start/org-babel-tangle-config gets executed each time such a buffer gets saved.
This function checks to see if the file being saved is the Emacs.org file you’re looking at right now, and if so,
automatically exports the configuration here to the associated output files.
#+begin_src emacs-lisp
    (defun start/org-babel-tangle-config ()
      "Automatically tangle our init.org config file and refresh package-quickstart when we save it."
      (interactive)
      (when (and (buffer-file-name)  ;; This handles nil buffer-file-name
                 ;; Use file-truename to handle simlinks (eg. when using GNU stow)
                 ;; Use equal instead of string-equal as file-truename returns list-like structure
                 (equal (file-truename (file-name-directory (buffer-file-name)))
                        (file-truename (expand-file-name user-emacs-directory))))
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle)
          (package-quickstart-refresh))))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'start/org-babel-tangle-config)))
#+end_src

** Show startup time
#+begin_src emacs-lisp
    (defun start/display-startup-time ()
      (message "Emacs loaded in %s with %d garbage collections."
               (format "%.2f seconds"
                       (float-time
    					(time-subtract after-init-time before-init-time)))
               gcs-done))

    (add-hook 'emacs-startup-hook #'start/display-startup-time)
#+end_src

** Use Package
A macro that allows you to isolate package configuration in your .emacs file in a 
way that is both performance-oriented and, well, tidy. We use it because it makes 
package configuration really easy.

With Emacs 29 use-package is now built-in.

This code eliminates the need to type :ensure t for each package download. 
Instead, you’ll only need to use :ensure nil when you want to explicitly prevent a 
package from being downloaded.
#+begin_src emacs-lisp
    (require 'use-package-ensure) ;; Load use-package-always-ensure
    (setq use-package-always-ensure t) ;; Always ensures that a package is installed

#+end_src


** Setting package repositories
Like Linux distributions, Emacs uses repositories to manage its packages.

#+begin_src emacs-lisp
    (setq package-archives '(("melpa" . "https://melpa.org/packages/") ;; Sets default package repositories
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/"))) ;; For Eat Terminal
#+end_src


** Package quickstart

Improves startup times by allowing Emacs to precompute and generate a single, 
large autoload file. Instead of re-computing them on every startup.

The larger your configuration, the more it will be felt at startup.

However, if you enable this, you’ll need to manually run the package-quickstart-refresh 
command whenever your package activations change, such as when you modify the package-load-list 
value. We put it inside Auto-tangle hook so when we save this file it runs it automatically.

As I tested, it makes startup about 0.1 seconds faster. Avg:

    Off: 0.66 sec
    On: 0.59 sec

Package quickstart only works with package.el. If you plan to use a different
package manager, remember to remove this section and the package-quickstart-refresh 
line in the Auto-tangle hook.

#+begin_src emacs-lisp
    (setq package-quickstart t) ;; For blazingly fast startup times, this line makes startup miles faster
#+end_src

** Good Defaults
#+begin_src emacs-lisp
    (use-package emacs
      :custom
      (menu-bar-mode nil)         ;; Disable the menu bar
      (scroll-bar-mode nil)       ;; Disable the scroll bar
      (tool-bar-mode nil)         ;; Disable the tool bar
      (inhibit-startup-screen t)  ;; Disable welcome screen

      (delete-selection-mode t)   ;; Select text and delete it by typing.
      (electric-indent-mode nil)  ;; Turn off the weird indenting that Emacs does by default.
      (electric-pair-mode t)      ;; Turns on automatic parens pairing

      (blink-cursor-mode nil)     ;; Don't blink cursor
      (global-auto-revert-mode t) ;; Automatically reload file and show changes if the file has changed

      ;;(dired-kill-when-opening-new-dired-buffer t) ;; Dired don't create new buffer
      ;;(recentf-mode t) ;; Enable recent file mode

      ;;(global-visual-line-mode t)           ;; Enable truncated lines
      (display-line-numbers-type 'relative)   ;; Relative line numbers
      (global-display-line-numbers-mode t)    ;; Display line numbers
    	(column-number-mode t)                  ;; Display column in mode line
    	
      (mouse-wheel-progressive-speed nil) ;; Disable progressive speed when scrolling
      (scroll-conservatively 10) ;; Smooth scrolling
      ;;(scroll-margin 8)
    	
    	(use-short-answers t)  ;; Use short answers (y instead of yes)

      (tab-width 2)

      (make-backup-files nil) ;; Stop creating ~ backup files
      (auto-save-default nil) ;; Stop creating # auto save files
      :hook
      (prog-mode . (lambda () (hs-minor-mode t))) ;; Enable folding hide/show globally
      :config
      ;; Move customization variables to a separate file and load it, avoid filling up init.el with unnecessary variables
      (setq custom-file (locate-user-emacs-file "custom-vars.el"))
      (load custom-file 'noerror 'nomessage)
      :bind (
             ([escape] . keyboard-escape-quit) ;; Makes Escape quit prompts (Minibuffer Escape)
             ("C-+" . text-scale-increase)
             ("C--" . text-scale-decrease)
             ("<C-wheel-up>" . text-scale-increase)
             ("<C-wheel-down>" . text-scale-decrease))

      )
#+end_src

* Important to load first

** Evil Mode
An extensible vi/vim layer for Emacs. Because…let’s face it. The Vim keybindings are just plain better.
Notes:
- You can toggle evil mode with C-z.
- To paste without copy (yank) select the text and use P (shift-p).

If you don't want to use evil-mode don't forget to remove:
- Messages buffer fix in Good default section (:ghook)
- And also change general.el keybindings and setup (general-evil-setup, :states, etc.)
#+begin_src emacs-lisp
    (use-package evil
      :init ;; Execute code Before a package is loaded
      (evil-mode)
      :config ;; Execute code After a package is loaded
      (evil-set-initial-state 'eat-mode 'insert) ;; Set initial state in eat terminal to insert mode
      :custom ;; Customization of package custom variables
      (evil-want-keybinding nil)    ;; Disable evil bindings in other modes (It's not consistent and not good)
      (evil-want-C-u-scroll t)      ;; Set C-u to scroll up
      (evil-want-C-i-jump nil)      ;; Disables C-i jump
      (evil-undo-system 'undo-redo) ;; C-r to redo
      ;; Unmap keys in 'evil-maps. If not done, org-return-follows-link will not work
      :bind (:map evil-motion-state-map
                  ("SPC" . nil)
                  ("RET" . nil)
                  ("TAB" . nil)))
    (use-package evil-collection
      :after evil
      :config
      ;; Setting where to use evil-collection
      (setq evil-collection-mode-list '(dired ibuffer magit corfu vertico consult info))
      (evil-collection-init))
#+end_src

** General Keybindings
A keybinding framework to set keybindings easily.
The Leader key is what you will press when you want to access your keybindings (SPC + . Find file).
To search and replace, use query-replace-regexp to replace one by one C-M-% (SPC to replace n to skip).
#+begin_src emacs-lisp

    (use-package general
      :config
      (general-evil-setup)  ;; evil
      ;; Set up 'C-SPC' as the leader key
      (general-create-definer start/leader-keys
        :states '(normal insert visual motion emacs) ;; evil
        :keymaps 'override
        :prefix "C-SPC"
        :global-prefix "C-SPC") ;; Set global leader key so we can access our keybindings from any state

      (start/leader-keys
        "." '(find-file :wk "Find file")
        "TAB" '(comment-line :wk "Comment lines")
        "q" '(flymake-show-buffer-diagnostics :wk "Flymake buffer diagnostic")
        "c" '(eat :wk "Eat terminal")
        "p" '(projectile-command-map :wk "Projectile")
        "s p" '(projectile-discover-projects-in-search-path :wk "Search for projects"))

      (start/leader-keys
        "s" '(:ignore t :wk "Search")
        "s c" '((lambda () (interactive) (find-file "~/.config/emacs/init.org")) :wk "Find emacs Config")
        "s r" '(consult-recent-file :wk "Search recent files")
        "s f" '(consult-fd :wk "Search files with fd")
        "s g" '(consult-ripgrep :wk "Search with ripgrep")
        "s l" '(consult-line :wk "Search line")
        "s i" '(consult-imenu :wk "Search Imenu buffer locations")) ;; This one is really cool

      (start/leader-keys
        "d" '(:ignore t :wk "Buffers & Dired")
        "d s" '(consult-buffer :wk "Switch buffer")
        "d k" '(kill-current-buffer :wk "Kill current buffer")
        "d i" '(ibuffer :wk "Ibuffer")
        "d n" '(next-buffer :wk "Next buffer")
        "d p" '(previous-buffer :wk "Previous buffer")
        "d r" '(revert-buffer :wk "Reload buffer")
        "d v" '(dired :wk "Open dired")
        "d j" '(dired-jump :wk "Dired jump to current"))

      (start/leader-keys
        "e" '(:ignore t :wk "Languages")
        "e e" '(eglot-reconnect :wk "Eglot Reconnect")
        "e d" '(eldoc-doc-buffer :wk "Eldoc Buffer")
        "e f" '(eglot-format :wk "Eglot Format")
        "e l" '(consult-flymake :wk "Consult Flymake")
        "e r" '(eglot-rename :wk "Eglot Rename")
        "e i" '(xref-find-definitions :wk "Find definition")
        "e v" '(:ignore t :wk "Elisp")
        "e v b" '(eval-buffer :wk "Evaluate elisp in buffer")
        "e v r" '(eval-region :wk "Evaluate elisp in region"))

      (start/leader-keys
        "g" '(:ignore t :wk "Git")
        "g s" '(magit-status :wk "Magit status"))

      (start/leader-keys
        "h" '(:ignore t :wk "Help") ;; To get more help use C-h commands (describe variable, function, etc.)
        "h q" '(save-buffers-kill-emacs :wk "Quit Emacs and Daemon")
        "h r" '((lambda () (interactive)
                  (load-file "~/.config/emacs/init.el"))
                :wk "Reload Emacs config"))

      (start/leader-keys
        "t" '(:ignore t :wk "Toggle")
        "t t" '(visual-line-mode :wk "Toggle truncated lines (wrap)")
        "t l" '(display-line-numbers-mode :wk "Toggle line numbers"))
      )
#+end_src


* Appearance
** Set Theme
Use consult-theme to easily try out themes (*Epilepsy* Warning).
#+begin_src emacs-lisp
    ;;(use-package gruvbox-theme
    ;;  :config
    ;;  (load-theme 'gruvbox-dark-medium t)) ;; We need to add t to trust this package
    (use-package doom-themes
      :ensure t
      :config
      ;; Global settings (defaults)
      (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
            doom-themes-enable-italic t) ; if nil, italics is universally disabled
      (load-theme 'doom-dracula t)

      
;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)
      ;; Enable custom neotree theme (all-the-icons must be installed!)
      (doom-themes-neotree-config)
      ;; or for treemacs users
      (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
      (doom-themes-treemacs-config)
      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config))
#+end_src

** Transparency
With Emacs version 29, true transparency has been added.
#+begin_src emacs-lisp
    (add-to-list 'default-frame-alist '(alpha-background . 90)) ;; For all new frames henceforth
#+end_src

** Fonts
*** Setting fonts
#+begin_src emacs-lisp
    (set-face-attribute 'default nil
                        :font "JetBrainsMono Nerd Font" ;; Set your favorite type of font or download JetBrains Mono
                        :height 130
                        :weight 'medium)
    ;; This sets the default font on all graphical frames created after restarting Emacs.
    ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
    ;; are not right unless I also add this method of setting the default font.

    (add-to-list 'default-frame-alist '(font . "JetBrainsMono Nerd Font")) ;; Set your favorite font
    (setq-default line-spacing 0.22)
#+end_src

*** Zooming In/Out
You can use the bindings C-+ C-- for zooming in/out. You can also use CTRL plus the mouse wheel for zooming in/out.
#+begin_src emacs-lisp
    (use-package emacs
      :bind
      ("C-+" . text-scale-increase)
      ("C--" . text-scale-decrease)
      ("<C-wheel-up>" . text-scale-increase)
      ("<C-wheel-down>" . text-scale-decrease))
#+end_src

** Modeline
Replace the default modeline with a prettier more useful.
#+begin_src emacs-lisp
    (use-package doom-modeline
      :init (doom-modeline-mode 1)
      :custom
      (doom-modeline-height 25)     ;; Sets modeline height
      (doom-modeline-bar-width 5)   ;; Sets right bar width
      (doom-modeline-persp-name t)  ;; Adds perspective name to modeline
      (doom-modeline-persp-icon t)) ;; Adds folder icon next to persp name
#+end_src

** Nerd Icons
For icons and more helpful UI.
This is an icon set that can be used with dired, ibuffer and other Emacs programs.

Don't forget to use nerd-icons-install-fonts.

We use Nerd icons because it has more, better icons and all-the-icons only supports GUI.
While nerd-icons supports both GUI and TUI.
#+begin_src emacs-lisp
    (use-package nerd-icons
      :if (display-graphic-p))

    (use-package nerd-icons-dired
      :hook (dired-mode . (lambda () (nerd-icons-dired-mode t))))

    (use-package nerd-icons-ibuffer
      :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

* Development
** Add binaries to path
Add a path for custom binaries
#+begin_src emacs-lisp
  ;; (add-to-list 'exec-path "~/dev/bin/")
  (add-to-list 'exec-path "~/.local/bin/")
  (add-to-list 'exec-path "~/dev/bin/")
#+end_src

** Projectile
Project interaction library for Emacs.
#+begin_src emacs-lisp
    (use-package projectile
      :init
      (projectile-mode)
      :custom
      (projectile-run-use-comint-mode t) ;; Interactive run dialog when running projects inside emacs (like giving input)
      (projectile-switch-project-action #'projectile-dired) ;; Open dired when switching to a project
      (projectile-project-search-path '(("~/dev" . 2)))) ;; . 1 means only search the first subdirectory level for projects
    ;; Use Bookmarks for smaller, not standard projects
#+end_src

** Eglot
Language Server Protocol Support for Emacs. The built-in is now Eglot (with emacs 29).

Eglot is fast and minimal, but requires manual setup for LSP servers (downloading).
For more [[https://www.gnu.org/software/emacs/manual/html_mono/eglot.html][information how to use.]] One alternative to Eglot is Lsp-mode, check out the [[https://github.com/MiniApollo/kickstart.emacs/wiki][project wiki]] page for more information.

Eglot is easy to set up, but the only difficult part is downloading and setting up the lsp servers.
After that just add a hook with eglot-ensure to automatically start eglot for a given file type. And you are done.

As an example to use C, C++ you need to install clangd(or ccls) and uncomment the following lines. Now the language server will start automatically when opening any c,c++ file.

A harder example is Lua. Download the lua-language-server from their git repository, make the lua-language-server file executable at lua-language-server/bin.
Uncomment the following lines and change the path to the language server executable. Now the language server will work.
Or add the lua-language-server executable to your path.

If you can use a package manager just install the lsp server and add a hook.
Use visual block to uncomment easily in Org documents (C-v).
#+begin_src emacs-lisp
    ;;(use-package eglot
    ;;  :ensure nil ;; Don't install eglot because it's now built-in
    ;;  :hook ((c-mode c++-mode ;; Autostart lsp servers for a given mode
    ;;                 lua-mode) ;; Lua-mode needs to be installed
    ;;         . eglot-ensure)
    ;;  :custom
    ;;  ;; Good default
    ;;  (eglot-events-buffer-size 0) ;; No event buffers (Lsp server logs)
    ;;  (eglot-autoshutdown t);; Shutdown unused servers.
    ;;  (eglot-report-progress nil) ;; Disable lsp server logs (Don't show lsp messages at the bottom, java)
    ;;  ;; Manual lsp servers
    ;;  :config
    ;;  (add-to-list 'eglot-server-programs
    ;;               `(lua-mode . ("PATH_TO_THE_LSP_FOLDER/bin/lua-language-server" "-lsp"))) ;; Adds our lua lsp server to eglot's server list
    ;;  )
    (use-package
      eglot
      :ensure nil
      :config
      (add-to-list 'eglot-server-programs
                   '(((python-ts-mode) . ("pyright-langserver"))))
      )

    (with-eval-after-load 'eglot
    	(setf (alist-get '(elixir-mode elixir-ts-mode heex-ts-mode)
    									 eglot-server-programs
    									 nil nil #'equal)
    				(if (and (fboundp 'w32-shell-dos-semantics)
    								 (w32-shell-dos-semantics))
    						'("expert_windows_amd64")
    					(eglot-alternatives
    					 '("expert_linux_amd64" "start_lexical.sh")))))
#+end_src

** Sideline-flymake

#+begin_src emacs-lisp
(use-package sideline-flymake
  :hook (flymake-mode . sideline-mode)
  :custom
  (sideline-flymake-display-mode 'line) ;; Show errors on the current line
  (sideline-backends-right '(sideline-flymake)))
#+end_src

** Yasnippet
#+begin_src emacs-lisp
    (use-package yasnippet-snippets
      :hook (prog-mode . yas-minor-mode))
#+end_src

** Auto-Virtualenv
#+begin_src emacs-lisp
    (use-package auto-virtualenv
      :ensure t
      :init
      (use-package pyvenv
        :ensure t)
      :config
      (add-hook 'python-mode-hook 'auto-virtualenv-set-virtualenv)
      (add-hook 'projectile-after-switch-project-hook 'auto-virtualenv-set-virtualenv)  ;; If using projectile
      )
#+end_src


** Treesit-Auto
Setup Treesit-Auto to automatically install TS grammars and configure major modes to use TS
# #+begin_src emacs-lisp
#     (use-package treesit-auto
#       :ensure t
#       :custom
#       (treesit-auto-install 'prompt)
#       :config
#       (treesit-auto-add-to-auto-mode-alist 'all)
#       (global-treesit-auto-mode))
# #+end_src

** Treesitter
#+begin_src emacs-lisp
    (setq treesit-language-source-alist
          '((bash "https://github.com/tree-sitter/tree-sitter-bash")
            (cmake "https://github.com/uyha/tree-sitter-cmake")
            (c "https://github.com/tree-sitter/tree-sitter-c")
            (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
            (css "https://github.com/tree-sitter/tree-sitter-css")
            (elisp "https://github.com/Wilfred/tree-sitter-elisp")
            (go "https://github.com/tree-sitter/tree-sitter-go")
            (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
            (html "https://github.com/tree-sitter/tree-sitter-html")
            (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
            (json "https://github.com/tree-sitter/tree-sitter-json")
            (make "https://github.com/alemuller/tree-sitter-make")
            (markdown "https://github.com/ikatyang/tree-sitter-markdown")
            (python "https://github.com/tree-sitter/tree-sitter-python")
            (rust "https://github.com/tree-sitter/tree-sitter-rust")
            (toml "https://github.com/tree-sitter/tree-sitter-toml")
            (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
            (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
            (yaml "https://github.com/ikatyang/tree-sitter-yaml")
    				(heex "https://github.com/phoenixframework/tree-sitter-heex")
            (elixir "https://github.com/elixir-lang/tree-sitter-elixir")))

    (defun start/install-treesit-grammars ()
      "Install missing treesitter grammars"
      (interactive)
      (dolist (grammar treesit-language-source-alist)
        (let ((lang (car grammar)))
          (unless (treesit-language-available-p lang)
            (treesit-install-language-grammar lang)))))

    ;; Call this function to install missing grammars
    ;; (start/install-treesit-grammars)

    ;; Optionally, add any additional mode remappings not covered by defaults
    (setq major-mode-remap-alist
          '((yaml-mode . yaml-ts-mode)
            (sh-mode . bash-ts-mode)
            (c-mode . c-ts-mode)
            (c++-mode . c++-ts-mode)
            (css-mode . css-ts-mode)
            (python-mode . python-ts-mode)
            (mhtml-mode . html-ts-mode)
            (javascript-mode . js-ts-mode)
            (json-mode . json-ts-mode)
            (typescript-mode . typescript-ts-mode)
            (conf-toml-mode . toml-ts-mode)
            (elixir-mode . elixir-ts-mode)
            ))

    ;; Or if there is no built in mode
    (use-package cmake-ts-mode :ensure nil :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'"))
    (use-package go-ts-mode :ensure nil :mode "\\.go\\'")
    (use-package go-mod-ts-mode :ensure nil :mode "\\.mod\\'")
    (use-package rust-ts-mode :ensure nil :mode "\\.rs\\'")
    (use-package tsx-ts-mode :ensure nil :mode "\\.tsx\\'")
    (use-package elixir-ts-mode :ensure nil :mode ("\\.exs\\'" "\\.ex\\'"))
#+end_src


** Language modes
It's not required for every language like C,C++,C#,Java,Javascript etc. to install language mode packages,
but for more specific languages it is necessary for syntax highlighting.
If you want to use TreeSitter, check out this [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][website]] or try out [[https://github.com/renzmann/treesit-auto][Treesit-auto]].
Currently it's tedious to use Treesitter, because emacs has not yet fully migrated to it.

*** Lua mode
Example, how to setup a language mode (if you don't want it, feel free to delete it).
Use SPC-tab to uncomment the lines.
#+begin_src emacs-lisp
    (use-package lua-mode
      :mode "\\.lua\\'") ;; Only start in a lua file
#+end_src

*** Org Mode
Org mode is one of the things that emacs is loved for.
Once you've used it for a bit, you'll understand why people love it. Even reading about it can be inspiring!
For example, this document is effectively the source code and descriptions bound into the one document,
much like the literate programming ideas that Donald Knuth made famous.
#+begin_src emacs-lisp
    (use-package org
      :ensure nil
      :custom
      (org-edit-src-content-indentation 4) ;; Set src block automatic indent to 4 instead of 2.

      :hook
      (org-mode . org-indent-mode) ;; Indent text
      ;; The following prevents <> from auto-pairing when electric-pair-mode is on.
      ;; Otherwise, org-tempo is broken when you try to <s TAB...
      ;;(org-mode . (lambda ()
      ;;              (setq-local electric-pair-inhibit-predicate
      ;;                          `(lambda (c)
      ;;                             (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
      )
#+end_src

*** Markdown mode

#+begin_src emacs-lisp
    (use-package markdown-mode
      :ensure t
      :mode ("README\\.md\\'" . gfm-mode)
      :init (setq markdown-command "multimarkdown")
      )
#+end_src
*** Elixir mode
Setup Elixir mode using elixir-ts-mode and treesiter grammar
#+begin_src emacs-lisp
    (use-package
      elixir-ts-mode
      :hook (elixir-ts-mode . eglot-ensure)
      (elixir-ts-mode
       .
       (lambda ()
         (push '(">=" . ?\u2265) prettify-symbols-alist)
         (push '("<=" . ?\u2264) prettify-symbols-alist)
         (push '("!=" . ?\u2260) prettify-symbols-alist)
         (push '("==" . ?\u2A75) prettify-symbols-alist)
         (push '("=~" . ?\u2245) prettify-symbols-alist)
         (push '("<-" . ?\u2190) prettify-symbols-alist)
         (push '("->" . ?\u2192) prettify-symbols-alist)
         (push '("<-" . ?\u2190) prettify-symbols-alist)
         (push '("|>" . ?\u25B7) prettify-symbols-alist)))
      (before-save . eglot-format))

#+end_src

**** Table of Contents
#+begin_src emacs-lisp
    (use-package toc-org
      :commands toc-org-enable
      :hook (org-mode . toc-org-mode))
#+end_src

**** Org Superstar
Prettify headings and plain lists in Org mode. Modern version of org-bullets.
#+begin_src emacs-lisp
    (use-package org-superstar
      :after org
      :hook (org-mode . org-superstar-mode))
#+end_src

**** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.
Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.
#+begin_src emacs-lisp
    (use-package org-tempo
      :ensure nil
      :after org)
#+end_src

** AI
*** gptel
#+begin_src emacs-lisp

    (defun start/mistral-get-bearer-token ()
      "Retrieves and returns the bearer token for Mistral API."
      (interactive)
      ;; This data should be store in ~/.authinfo in the following format:
    	;; machine api.mistral.ai login bearer password api-key-goes-here
      (let* ((auth-data (car (auth-source-search :max 1 :host "api.mistral.ai" :user "bearer")))
             (secret-function (plist-get auth-data :secret)))
        (funcall secret-function)))

    (use-package gptel
      :ensure t
      :config
      ;;(setq gptel-model 'mistral-small) ;; Or a specific Mistral model like 'mistral-medium'
      ;; (setq gptel-backend 'mistral)

      (setq gptel-model   'mistral-small 
            gptel-backend
            (gptel-make-openai "MistralLeChat"  ;Any name you want
              :host "api.mistral.ai"
              :endpoint "/v1/chat/completions"
              :protocol "https"
              :key (start/mistral-get-bearer-token)              ;can be a function that returns the key
              :models '("mistral-small")))	
      )

#+end_src


** Terminal
*** Eat
Eat(Emulate A Terminal) is a terminal emulator within Emacs.
It's more portable and less overhead for users over like vterm or eshell.
We setup eat with eshell, if you want to use bash, zsh etc., check out their git [[https://codeberg.org/akib/emacs-eat][repository]] how to do it.
#+begin_src emacs-lisp
    (use-package eat
      :hook ('eshell-load-hook #'eat-eshell-mode))
#+end_src

* Multi File Example
** Adding the lisp directory to load-path
Adds the lisp directory to emacs's load path to search for elisp files.
This is necessary, because emacs does not search the entire user-emacs-directory.
The directory name can be anything, just add it to the load-path.
#+begin_src emacs-lisp
    ;; (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+end_src

** Sourcing the files
To use the elisp files we need to load it.
Notes:
- Don't forget the file and the provide name needs to be the same.
- When naming elisp files, functions, it is recommended to use a group name (e.g init-, start- or any custom name), so it does not get mixed up with other names, functions.
#+begin_src emacs-lisp
    ;; (require 'start-multiFileExample)
#+end_src

** Using the file
And now we can use everything from that file.
#+begin_src emacs-lisp
    ;; (start/hello)
#+end_src

* Version control
All the package setups that don't need much tweaking.

** Git
*** Magit
Complete text-based user interface to Git.
#+begin_src emacs-lisp
    (use-package magit
      :commands magit-status)
#+end_src

*** Diff-hl
Highlights uncommitted changes on the left side of the window (area also known as the "gutter"), allows you to jump between and revert them selectively.
#+begin_src emacs-lisp
    (use-package diff-hl
      :hook ((dired-mode         . diff-hl-dired-mode-unless-remote)
             (magit-pre-refresh  . diff-hl-magit-pre-refresh)
             (magit-post-refresh . diff-hl-magit-post-refresh))
      :init (global-diff-hl-mode))
#+end_src

* Completion

** Corfu
Enhances in-buffer completion with a small completion popup.
Corfu is a small package, which relies on the Emacs completion facilities and concentrates on providing a polished completion.
For more configuration options check out their [[https://github.com/minad/corfu][git repository]].
Notes:
- To enter Orderless field separator, use M-SPC.
#+begin_src emacs-lisp
    (use-package corfu
      ;; Optional customizations
      :custom
      (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
      (corfu-auto t)                 ;; Enable auto completion
      (corfu-auto-prefix 2)          ;; Minimum length of prefix for auto completion.
      (corfu-popupinfo-mode t)       ;; Enable popup information
      (corfu-popupinfo-delay 0.5)    ;; Lower popupinfo delay to 0.5 seconds from 2 seconds
      (corfu-separator ?\s)          ;; Orderless field separator, Use M-SPC to enter separator
      ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
      ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
      ;; (corfu-preview-current nil)    ;; Disable current candidate preview
      ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
      ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
      ;; (corfu-scroll-margin 5)        ;; Use scroll margin
      (completion-ignore-case t)

      ;; Emacs 30 and newer: Disable Ispell completion function.
      ;; Try `cape-dict' as an alternative.
      (text-mode-ispell-word-completion nil)
      
      ;; Enable indentation+completion using the TAB key.
      ;; `completion-at-point' is often bound to M-TAB.
      (tab-always-indent 'complete)

      (corfu-preview-current nil) ;; Don't insert completion without confirmation
      ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
      ;; be used globally (M-/).  See also the customization variable
      ;; `global-corfu-modes' to exclude certain modes.
      :init
      (global-corfu-mode))

    (use-package nerd-icons-corfu
      :after corfu
      :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

** Cape
Provides Completion At Point Extensions which can be used in combination with Corfu, Company or the default completion UI.
Notes:
- The functions that are added later will be the first in the completion list.
- Take care when adding Capfs (Completion-at-point-functions) to the list since each of the Capfs adds a small runtime cost.
Read the [[https://github.com/minad/cape#configuration][configuration section]] in Cape's readme for more information.
#+begin_src emacs-lisp
    (use-package cape
      :after corfu
      :init
      ;; Add to the global default value of `completion-at-point-functions' which is
      ;; used by `completion-at-point'.  The order of the functions matters, the
      ;; first function returning a result wins.  Note that the list of buffer-local
      ;; completion functions takes precedence over the global list.
      ;; The functions that are added later will be the first in the list

      (add-to-list 'completion-at-point-functions #'cape-dabbrev) ;; Complete word from current buffers
      (add-to-list 'completion-at-point-functions #'cape-dict) ;; Dictionary completion
      (add-to-list 'completion-at-point-functions #'cape-file) ;; Path completion
      (add-to-list 'completion-at-point-functions #'cape-elisp-block) ;; Complete elisp in Org or Markdown mode
      (add-to-list 'completion-at-point-functions #'cape-keyword) ;; Keyword/Snipet completion

      ;;(add-to-list 'completion-at-point-functions #'cape-abbrev) ;; Complete abbreviation
      ;;(add-to-list 'completion-at-point-functions #'cape-history) ;; Complete from Eshell, Comint or minibuffer history
      ;;(add-to-list 'completion-at-point-functions #'cape-line) ;; Complete entire line from current buffer
      ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol) ;; Complete Elisp symbol
      ;;(add-to-list 'completion-at-point-functions #'cape-tex) ;; Complete Unicode char from TeX command, e.g. \hbar
      ;;(add-to-list 'completion-at-point-functions #'cape-sgml) ;; Complete Unicode char from SGML entity, e.g., &alpha
      ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345) ;; Complete Unicode char using RFC 1345 mnemonics
      )
#+end_src

** Orderless
Completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order.
Recomended for packages like vertico, corfu.
#+begin_src emacs-lisp
    (use-package orderless
      :custom
      (completion-styles '(orderless basic))
      (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Vertico and Marginalia
- Vertico: Provides a performant and minimalistic vertical completion UI based on the default completion system.
- Savehist: Saves completion history.
- Marginalia: Adds extra metadata for completions in the margins (like descriptions).
- Nerd-icons-completion: Adds icons to completion candidates using the built in completion metadata functions.

We use this packages, because they use emacs native functions. Unlike Ivy or Helm.
One alternative is ivy and counsel, check out the [[https://github.com/MiniApollo/kickstart.emacs/wiki][project wiki]] for more inforomation.
#+begin_src emacs-lisp
    (use-package vertico
      :init
      (vertico-mode))

    (savehist-mode) ;; Enables save history mode

    (use-package marginalia
      :after vertico
      :init
      (marginalia-mode))

    (use-package nerd-icons-completion
      :after marginalia
      :config
      (nerd-icons-completion-mode)
      :hook
      ('marginalia-mode-hook . 'nerd-icons-completion-marginalia-setup))
#+end_src

** Consult
Provides search and navigation commands based on the Emacs completion function.
Check out their [[https://github.com/minad/consult][git repository]] for more awesome functions.
#+begin_src emacs-lisp
    (use-package consult
      ;; Enable automatic preview at point in the *Completions* buffer. This is
      ;; relevant when you use the default completion UI.
      :hook (completion-list-mode . consult-preview-at-point-mode)
      :init
      ;; Optionally configure the register formatting. This improves the register
      ;; preview for `consult-register', `consult-register-load',
      ;; `consult-register-store' and the Emacs built-ins.
      (setq register-preview-delay 0.5
            register-preview-function #'consult-register-format)

      ;; Optionally tweak the register preview window.
      ;; This adds thin lines, sorting and hides the mode line of the window.
      (advice-add #'register-preview :override #'consult-register-window)

      ;; Use Consult to select xref locations with preview
      (setq xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref)
      :config
      ;; Optionally configure preview. The default value
      ;; is 'any, such that any key triggers the preview.
      ;; (setq consult-preview-key 'any)
      ;; (setq consult-preview-key "M-.")
      ;; (setq consult-preview-key '("S-<down>" "S-<up>"))

      ;; For some commands and buffer sources it is useful to configure the
      ;; :preview-key on a per-command basis using the `consult-customize' macro.
      ;; (consult-customize
      ;; consult-theme :preview-key '(:debounce 0.2 any)
      ;; consult-ripgrep consult-git-grep consult-grep
      ;; consult-bookmark consult-recent-file consult-xref
      ;; consult--source-bookmark consult--source-file-register
      ;; consult--source-recent-file consult--source-project-recent-file
      ;; :preview-key "M-."
      ;; :preview-key '(:debounce 0.4 any))

      ;; By default `consult-project-function' uses `project-root' from project.el.
      ;; Optionally configure a different project root function.
       ;;;; 1. project.el (the default)
      ;; (setq consult-project-function #'consult--default-project--function)
       ;;;; 2. vc.el (vc-root-dir)
      ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
       ;;;; 3. locate-dominating-file
      ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
       ;;;; 4. projectile.el (projectile-project-root)
      (autoload 'projectile-project-root "projectile")
      (setq consult-project-function (lambda (_) (projectile-project-root)))
       ;;;; 5. No project support
      ;; (setq consult-project-function nil)
      )
#+end_src

** Helpful

#+begin_src emacs-lisp
(use-package helpful
  :bind
  ;; Note that the built-in `describe-function' includes both functions
  ;; and macros. `helpful-function' is functions only, so we provide
  ;; `helpful-callable' as a drop-in replacement.
  ("C-h f" . helpful-callable)
  ("C-h v" . helpful-variable)
  ("C-h k" . helpful-key)
  ("C-h x" . helpful-command)
  )
#+end_src

** Treemacs
Treemacs integration alongside evil, projectile and dired
#+begin_src emacs-lisp
    (use-package treemacs
      :ensure t
      :defer t
      :init
      (with-eval-after-load 'winum
        (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
      :config
      (progn
        (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
              treemacs-deferred-git-apply-delay        0.5
              treemacs-directory-name-transformer      #'identity
              treemacs-display-in-side-window          t
              treemacs-eldoc-display                   'simple
              treemacs-file-event-delay                2000
              treemacs-file-extension-regex            treemacs-last-period-regex-value
              treemacs-file-follow-delay               0.2
              treemacs-file-name-transformer           #'identity
              treemacs-follow-after-init               t
              treemacs-expand-after-init               t
              treemacs-find-workspace-method           'find-for-file-or-pick-first
              treemacs-git-command-pipe                ""
              treemacs-goto-tag-strategy               'refetch-index
              treemacs-header-scroll-indicators        '(nil . "^^^^^^")
              treemacs-hide-dot-git-directory          t
              treemacs-indentation                     2
              treemacs-indentation-string              " "
              treemacs-is-never-other-window           nil
              treemacs-max-git-entries                 5000
              treemacs-missing-project-action          'ask
              treemacs-move-files-by-mouse-dragging    t
              treemacs-move-forward-on-expand          nil
              treemacs-no-png-images                   nil
              treemacs-no-delete-other-windows         t
              treemacs-project-follow-cleanup          nil
              treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
              treemacs-position                        'left
              treemacs-read-string-input               'from-child-frame
              treemacs-recenter-distance               0.1
              treemacs-recenter-after-file-follow      nil
              treemacs-recenter-after-tag-follow       nil
              treemacs-recenter-after-project-jump     'always
              treemacs-recenter-after-project-expand   'on-distance
              treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
              treemacs-project-follow-into-home        nil
              treemacs-show-cursor                     nil
              treemacs-show-hidden-files               t
              treemacs-silent-filewatch                nil
              treemacs-silent-refresh                  nil
              treemacs-sorting                         'alphabetic-asc
              treemacs-select-when-already-in-treemacs 'move-back
              treemacs-space-between-root-nodes        t
              treemacs-tag-follow-cleanup              t
              treemacs-tag-follow-delay                1.5
              treemacs-text-scale                      nil
              treemacs-user-mode-line-format           nil
              treemacs-user-header-line-format         nil
              treemacs-wide-toggle-width               70
              treemacs-width                           35
              treemacs-width-increment                 1
              treemacs-width-is-initially-locked       t
              treemacs-workspace-switch-cleanup        nil)

        ;; The default width and height of the icons is 22 pixels. If you are
        ;; using a Hi-DPI display, uncomment this to double the icon size.
        ;;(treemacs-resize-icons 44)

        (treemacs-follow-mode t)
        (treemacs-filewatch-mode t)
        (treemacs-fringe-indicator-mode 'always)
        (when treemacs-python-executable
          (treemacs-git-commit-diff-mode t))

        (pcase (cons (not (null (executable-find "git")))
                     (not (null treemacs-python-executable)))
          (`(t . t)
           (treemacs-git-mode 'deferred))
          (`(t . _)
           (treemacs-git-mode 'simple)))

        (treemacs-hide-gitignored-files-mode nil))
      :bind
      (:map global-map
            ("M-0"       . treemacs-select-window)
            ("C-x t 1"   . treemacs-delete-other-windows)
            ("C-x t t"   . treemacs)
            ("C-x t d"   . treemacs-select-directory)
            ("C-x t B"   . treemacs-bookmark)
            ("C-x t C-t" . treemacs-find-file)
            ("C-x t M-t" . treemacs-find-tag)))

    (use-package treemacs-nerd-icons
      :after (treemacs nerd-icons)
      :config
      (treemacs-load-theme "nerd-icons"))

    (use-package treemacs-evil
      :after (treemacs evil)
      :ensure t)

    (use-package treemacs-projectile
      :after (treemacs projectile)
      :ensure t)

    (use-package treemacs-icons-dired
      :hook (dired-mode . treemacs-icons-dired-enable-once)
      :ensure t)

    (use-package treemacs-magit
      :after (treemacs magit)
      :ensure t)
#+end_src

** Diminish
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.
With this package installed, you can add ‘:diminish’ to any use-package block to hide that particular mode in the modeline.
#+begin_src emacs-lisp
    (use-package diminish)
#+end_src

** Rainbow Delimiters
Adds colors to brackets.
#+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Which-Key
Which-key is a helper utility for keychords (which key to press).
#+begin_src emacs-lisp
    (use-package which-key
      :init
      (which-key-mode 1)
      :diminish
      :custom
      (which-key-side-window-location 'bottom)
      (which-key-sort-order #'which-key-key-order-alpha) ;; Same as default, except single characters are sorted alphabetically
      (which-key-sort-uppercase-first nil)
      (which-key-add-column-padding 1) ;; Number of spaces to add to the left of each column
      (which-key-min-display-lines 6)  ;; Increase the minimum lines to display, because the default is only 1
      (which-key-idle-delay 0.8)       ;; Set the time delay (in seconds) for the which-key popup to appear
      (which-key-max-description-length 25)
      (which-key-allow-imprecise-window-fit nil)) ;; Fixes which-key window slipping out in Emacs Daemon
#+end_src

** Ws-butler
#+begin_src emacs-lisp
    (use-package ws-butler
      :init (ws-butler-global-mode))
#+end_src

* Runtime Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.
We also increase Read Process Output Max so emacs can read more data.
#+begin_src emacs-lisp
    ;; Make gc pauses faster by decreasing the threshold.
    (setq gc-cons-threshold (* 2 1000 1000))
    ;; Increase the amount of data which Emacs reads from the process
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src
